[
    {
        "id": "17f328fd3cc5f057",
        "type": "tab",
        "label": "Docker Stats",
        "disabled": false,
        "info": ""
    },
    {
        "id": "01250f521875b5f7",
        "type": "tab",
        "label": "Create Flows from Active Containers",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "5098bf90dbba1fe0",
        "type": "influxdb",
        "hostname": "influx",
        "port": "8086",
        "protocol": "http",
        "database": "database",
        "name": "influxdb",
        "usetls": false,
        "tls": "",
        "influxdbVersion": "2.0",
        "url": "http://10.50.50.2:8086",
        "rejectUnauthorized": true
    },
    {
        "id": "d50d0c9f.31e858",
        "type": "tls-config",
        "name": "",
        "cert": "",
        "key": "",
        "ca": "",
        "certname": "",
        "keyname": "",
        "caname": "",
        "servername": "",
        "verifyservercert": false
    },
    {
        "id": "571a2d2a.81415c",
        "type": "mqtt-broker",
        "name": "localhost",
        "broker": "192.168.1.68",
        "port": "1883",
        "clientid": "",
        "usetls": false,
        "compatmode": true,
        "keepalive": "120",
        "cleansession": true,
        "birthTopic": "sensors/connected/test-client",
        "birthQos": "0",
        "birthRetain": "true",
        "birthPayload": "1",
        "closeTopic": "",
        "closePayload": "",
        "willTopic": "sensors/connected/test-client",
        "willQos": "0",
        "willRetain": "true",
        "willPayload": "0"
    },
    {
        "id": "f7f39f4e.896ae",
        "type": "tls-config",
        "name": "local-tls",
        "cert": "",
        "key": "",
        "ca": "",
        "certname": "",
        "keyname": "",
        "caname": "",
        "verifyservercert": false
    },
    {
        "id": "e3fc6628635cdb05",
        "type": "inject",
        "z": "17f328fd3cc5f057",
        "name": "",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": "1",
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 200,
        "y": 160,
        "wires": [
            [
                "43d9c2724cab10d3"
            ]
        ]
    },
    {
        "id": "e9c53ab3f943ade1",
        "type": "debug",
        "z": "17f328fd3cc5f057",
        "name": "msg",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1050,
        "y": 160,
        "wires": []
    },
    {
        "id": "43d9c2724cab10d3",
        "type": "http request",
        "z": "17f328fd3cc5f057",
        "name": "docker stats",
        "method": "GET",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "http://10.50.50.1:2375/containers/influxdb/stats?stream",
        "tls": "",
        "persist": false,
        "proxy": "",
        "authType": "",
        "senderr": false,
        "x": 470,
        "y": 160,
        "wires": [
            [
                "2d0c626ad863dcba",
                "c7811f2fa72ea08f"
            ]
        ]
    },
    {
        "id": "c7811f2fa72ea08f",
        "type": "function",
        "z": "17f328fd3cc5f057",
        "name": "Calculate metrics",
        "func": "const p = msg.payload;\n\n// Get memory status\nconst used_memory = p.memory_stats.usage - p.memory_stats.stats?.cache || 0;\nconst avaible_memory = p.memory_stats.limit || 0;\nconst memory_usage_percent = (used_memory / avaible_memory) * 100.0 || 0;\n\n// Get CPU status\nconst cpu_delta = p.cpu_stats.cpu_usage?.total_usage - p.precpu_stats.cpu_usage?.total_usage || 0;\nconst system_cpu_delta = p.cpu_stats.system_cpu_usage - p.precpu_stats.system_cpu_usage || 0;\nconst number_cpus = p.cpu_stats.online_cpus || 0;\nconst cpu_usage_percent = (cpu_delta / system_cpu_delta) * number_cpus * 100.0;\n\n// Get process status\nconst pids = p.pids_stats.current || 0;\n\n// Get network status\nlet net_io_rxbytes = 0;\nlet net_io_txbytes = 0;\nObject.keys(p.networks).forEach((key) => {\n  net_io_rxbytes += p.networks[key].rx_bytes;\n  net_io_txbytes += p.networks[key].tx_bytes;\n});\n\n// Get disk status\nconst blkio_io_stats = p.blkio_stats.io_service_bytes_recursive;\nconst block_io_readbytes = (blkio_io_stats ? blkio_io_stats[0]?.value : 0) || 0;\nconst block_io_writebytes = (blkio_io_stats ? blkio_io_stats[1]?.value : 0) || 0;\n\n// Generate payload message\nmsg.payload = [\n  {\n    measurement: msg.payload.name,\n    fields: {\n      used_memory,\n      avaible_memory,\n      memory_usage_percent,\n      cpu_delta,\n      system_cpu_delta,\n      number_cpus,\n      cpu_usage_percent,\n      pids,\n      net_io_rxbytes,\n      net_io_txbytes,\n      block_io_readbytes,\n      block_io_writebytes,\n    },\n  },\n];\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 810,
        "y": 160,
        "wires": [
            [
                "e9c53ab3f943ade1",
                "c0c03b8367bfac77"
            ]
        ]
    },
    {
        "id": "c0c03b8367bfac77",
        "type": "influxdb batch",
        "z": "17f328fd3cc5f057",
        "influxdb": "5098bf90dbba1fe0",
        "precision": "",
        "retentionPolicy": "",
        "name": "",
        "database": "database",
        "precisionV18FluxV20": "ms",
        "retentionPolicyV18Flux": "",
        "org": "UFRGS",
        "bucket": "database",
        "x": 1080,
        "y": 240,
        "wires": []
    },
    {
        "id": "2d0c626ad863dcba",
        "type": "debug",
        "z": "17f328fd3cc5f057",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 730,
        "y": 100,
        "wires": []
    },
    {
        "id": "b36aa30.3a7276",
        "type": "http request",
        "z": "01250f521875b5f7",
        "name": "GET Running Containers",
        "method": "GET",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "http://10.50.50.1:2375/containers/json?status=running",
        "tls": "",
        "persist": false,
        "proxy": "",
        "authType": "",
        "senderr": false,
        "x": 590,
        "y": 80,
        "wires": [
            [
                "e86aa30808485571",
                "52b8bdd41e861343"
            ]
        ]
    },
    {
        "id": "11167f67.5d5031",
        "type": "inject",
        "z": "01250f521875b5f7",
        "name": "Create Flows From Active Containers",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": "10",
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 250,
        "y": 80,
        "wires": [
            [
                "b36aa30.3a7276"
            ]
        ]
    },
    {
        "id": "94c03205e95753d2",
        "type": "http request",
        "z": "01250f521875b5f7",
        "name": "GET JSON Docker Stats",
        "method": "GET",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "http://10.50.50.3:1880/flow/17f328fd3cc5f057",
        "tls": "",
        "persist": false,
        "proxy": "",
        "authType": "",
        "senderr": false,
        "x": 590,
        "y": 320,
        "wires": [
            [
                "863a480a6aa3c753",
                "50c874339ec84c2d"
            ]
        ]
    },
    {
        "id": "e86aa30808485571",
        "type": "function",
        "z": "01250f521875b5f7",
        "name": "Running Containers Names",
        "func": "var p = msg.payload;\nvar containersName = new Array(p.length);\nfor (var i = 0; i < p.length ; i ++){\n    containersName[i] = p[i].Names[0];\n}\nmsg.containerName = containersName;\nmsg.count = p.length;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 600,
        "y": 140,
        "wires": [
            [
                "3e41d2578c4fa488"
            ]
        ]
    },
    {
        "id": "3b06faf82dae5751",
        "type": "function",
        "z": "01250f521875b5f7",
        "name": "Set New Flow",
        "func": "msg.payload.nodes[0].repeat = \"1\";\nvar flag = true;\nfor (var i = 2; i < msg.flowName.length; i++){\n        if (msg.flowName[i] == msg.containerName[msg.loop.index]){\n            msg.set = false;    \n            msg.loop.index++;\n            flag = false;\n            break;\n        }\n}\nif (msg.loop.index != msg.count && flag == true ){\n    for (var n = 0; n <= msg.count; n++){\n        if (msg.containerName[msg.loop.index] != msg.flowName[n]){\n            msg.payload.id = Math.random();\n            for (i = 0; i < msg.payload.nodes.length; i++){\n                if (msg.loop.index == 0){\n                    msg.payload.nodes[i].id = msg.payload.nodes[i].id+\"-\"+msg.loop.index;\n                }else{\n                    msg.payload.nodes[i].id = msg.payload.nodes[i].id.replace(/.$/, msg.loop.index);\n                }\n                var lengthWires = msg.payload.nodes[i].wires.length;\n                for (var j = 0; j < lengthWires; j++){\n                    var lengthArray = msg.payload.nodes[i].wires[j].length;\n                    for (var k = 0; k < lengthArray; k++){\n                        if (msg.loop.index == 0){\n                            msg.payload.nodes[i].wires[j][k] = msg.payload.nodes[i].wires[j][k]+\"-\"+msg.loop.index;\n                        }else{\n                            msg.payload.nodes[i].wires[j][k] = msg.payload.nodes[i].wires[j][k].replace(/.$/, msg.loop.index);\n                        }\n                    }\n                }\n            }\n            msg.payload.label = msg.containerName[msg.loop.index]; //contabilizar index 0\n            var containerName = msg.containerName[msg.loop.index]; //contabilizar index 0  \n            msg.payload.nodes[2].url = \"http://10.50.50.1:2375/containers\"+containerName+\"/stats?stream\";\n            msg.url = \"http://10.50.50.3:1880/flow\"\n            msg.set = true;\n        }\n    }\n    \n}\nif (msg.loop.index == msg.count){\n    msg.set = 2; // parar o loop\n}\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 740,
        "y": 440,
        "wires": [
            [
                "a4fb49eee28f63be",
                "bc5bc299e830f47f",
                "78972d1116adb1d8"
            ]
        ]
    },
    {
        "id": "78972d1116adb1d8",
        "type": "http request",
        "z": "01250f521875b5f7",
        "name": "POST new flow",
        "method": "POST",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "authType": "",
        "senderr": false,
        "x": 820,
        "y": 540,
        "wires": [
            [
                "41af39d4e0555052"
            ]
        ]
    },
    {
        "id": "41af39d4e0555052",
        "type": "debug",
        "z": "01250f521875b5f7",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1090,
        "y": 540,
        "wires": []
    },
    {
        "id": "863a480a6aa3c753",
        "type": "loop",
        "z": "01250f521875b5f7",
        "name": "",
        "kind": "fcnt",
        "count": "",
        "initial": "1",
        "step": "1",
        "condition": "",
        "conditionType": "js",
        "when": "before",
        "enumeration": "enum",
        "enumerationType": "msg",
        "limit": "",
        "loopPayload": "loop-keep",
        "finalPayload": "final-last",
        "x": 570,
        "y": 380,
        "wires": [
            [],
            [
                "3b06faf82dae5751"
            ]
        ]
    },
    {
        "id": "b80a79ea6449ca72",
        "type": "http request",
        "z": "01250f521875b5f7",
        "name": "GET Running Containers",
        "method": "GET",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "http://10.50.50.1:2375/containers/json?status=running",
        "tls": "",
        "persist": false,
        "proxy": "",
        "authType": "",
        "senderr": false,
        "x": 1530,
        "y": 80,
        "wires": [
            [
                "801f4b0c85967a7d"
            ]
        ]
    },
    {
        "id": "76c1c08e727e8391",
        "type": "inject",
        "z": "01250f521875b5f7",
        "name": "Delete Flows",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": "",
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 1290,
        "y": 80,
        "wires": [
            [
                "b80a79ea6449ca72"
            ]
        ]
    },
    {
        "id": "f5b9ecb42708cf00",
        "type": "http request",
        "z": "01250f521875b5f7",
        "name": "GET JSON Flows",
        "method": "GET",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "http://10.50.50.3:1880/flows",
        "tls": "",
        "persist": false,
        "proxy": "",
        "authType": "",
        "senderr": false,
        "x": 1510,
        "y": 200,
        "wires": [
            [
                "2046da8850e0ce79",
                "050dcfdfe3131bd7"
            ]
        ]
    },
    {
        "id": "801f4b0c85967a7d",
        "type": "function",
        "z": "01250f521875b5f7",
        "name": "Name of Running Containers",
        "func": "var p = msg.payload;\nvar containersName = new Array(p.length);\nfor (var i = 0; i < p.length ; i ++){\n    containersName[i] = p[i].Names[0];\n}\nmsg.containerName = containersName;\nmsg.count = p.length;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1540,
        "y": 140,
        "wires": [
            [
                "f5b9ecb42708cf00"
            ]
        ]
    },
    {
        "id": "9c21d0eca0023c77",
        "type": "function",
        "z": "01250f521875b5f7",
        "name": "Set New Flow",
        "func": "msg.teste = msg.payload.length;\nfor (var i = 0; i < msg.payload.length; i++){\n    if (msg.containerName[msg.loop.index] == msg.payload[i].label){\n        var id = msg.payload[i].id;\n        msg.url = \"http://10.50.50.3:1880/flow/\"+id;\n        return msg;\n    }\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1500,
        "y": 340,
        "wires": [
            [
                "050dcfdfe3131bd7",
                "e4e2957983426306"
            ]
        ]
    },
    {
        "id": "e4e2957983426306",
        "type": "http request",
        "z": "01250f521875b5f7",
        "name": "DELET containers flows",
        "method": "DELETE",
        "ret": "bin",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "authType": "",
        "senderr": false,
        "x": 1530,
        "y": 400,
        "wires": [
            []
        ]
    },
    {
        "id": "050dcfdfe3131bd7",
        "type": "loop",
        "z": "01250f521875b5f7",
        "name": "",
        "kind": "fcnt",
        "count": "",
        "initial": "1",
        "step": "1",
        "condition": "",
        "conditionType": "js",
        "when": "before",
        "enumeration": "enum",
        "enumerationType": "msg",
        "limit": "",
        "loopPayload": "loop-keep",
        "finalPayload": "final-last",
        "x": 1510,
        "y": 260,
        "wires": [
            [],
            [
                "9c21d0eca0023c77"
            ]
        ]
    },
    {
        "id": "a4fb49eee28f63be",
        "type": "debug",
        "z": "01250f521875b5f7",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1050,
        "y": 440,
        "wires": []
    },
    {
        "id": "50c874339ec84c2d",
        "type": "debug",
        "z": "01250f521875b5f7",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 890,
        "y": 320,
        "wires": []
    },
    {
        "id": "2046da8850e0ce79",
        "type": "debug",
        "z": "01250f521875b5f7",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1830,
        "y": 200,
        "wires": []
    },
    {
        "id": "3e41d2578c4fa488",
        "type": "http request",
        "z": "01250f521875b5f7",
        "name": "GET JSON Flows",
        "method": "GET",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "http://10.50.50.3:1880/flows",
        "tls": "",
        "persist": false,
        "proxy": "",
        "authType": "",
        "senderr": false,
        "x": 570,
        "y": 200,
        "wires": [
            [
                "6a706c45a817596d",
                "e3fda9eaf51703ac"
            ]
        ]
    },
    {
        "id": "6a706c45a817596d",
        "type": "function",
        "z": "01250f521875b5f7",
        "name": "Flow Names",
        "func": "var tab = new String(\"tab\");\nvar flowName = new Array();\nfor (var i = 0; i < msg.payload.length; i++){\n    if (msg.payload[i].type == tab){\n        flowName.push(msg.payload[i].label)    \n    }\n}\nmsg.flowName = flowName;\nmsg.set = true;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 550,
        "y": 260,
        "wires": [
            [
                "94c03205e95753d2"
            ]
        ]
    },
    {
        "id": "52b8bdd41e861343",
        "type": "debug",
        "z": "01250f521875b5f7",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 890,
        "y": 80,
        "wires": []
    },
    {
        "id": "bc5bc299e830f47f",
        "type": "switch",
        "z": "01250f521875b5f7",
        "name": "",
        "property": "set",
        "propertyType": "msg",
        "rules": [
            {
                "t": "true"
            },
            {
                "t": "false"
            },
            {
                "t": "eq",
                "v": "2",
                "vt": "num"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 3,
        "x": 450,
        "y": 440,
        "wires": [
            [
                "863a480a6aa3c753"
            ],
            [
                "3b06faf82dae5751"
            ],
            []
        ]
    },
    {
        "id": "e3fda9eaf51703ac",
        "type": "debug",
        "z": "01250f521875b5f7",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 890,
        "y": 200,
        "wires": []
    }
]